/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: webkit moz ms o) {
  @warn 'The `prefix` mixin is deprecated. Use `autoprefixer` tool for this.';
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    /* Output standard non-prefixed declaration */
    #{$property}: $value;
  }
}

/// Convert pixel font-size to rem font-size with pixel fallback
/// @access public
/// @param {Number} $size - Pixel font size
@mixin font-size($size) {
  font-size: $size;
  font-size: remCalc($size);
}

/// Very basic media query mixin for min-width
/// @access public
/// @param {Number} $breakpoint
@mixin min-width($breakpoint) {
  @media screen and (min-width: #{if(type-of($breakpoint) == 'string', unquote($breakpoint), inspect($breakpoint))}) {
    @content;
  }
}

/// Very basic media query mixin for max-width
/// @access public
/// @param {Number} $breakpoint
@mixin max-width($breakpoint) {
  @media screen and (max-width: #{if(type-of($breakpoint) == 'string', unquote($breakpoint), inspect($breakpoint))}) {
    @content;
  }
}

/// Async font loading
/// @access public
/// @param {String} $family
@mixin font-family($family) {
  font-family: $font-fallback;

  .wf-loaded & {
    font-family: $family;
  }
}
